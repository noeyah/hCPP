// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: Chat.proto
// Protobuf C++ Version: 5.29.3

#ifndef Chat_2eproto_2epb_2eh
#define Chat_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "Enums.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_Chat_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_Chat_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_Chat_2eproto;
namespace packet {
class ChatNot;
struct ChatNotDefaultTypeInternal;
extern ChatNotDefaultTypeInternal _ChatNot_default_instance_;
class ChatReq;
struct ChatReqDefaultTypeInternal;
extern ChatReqDefaultTypeInternal _ChatReq_default_instance_;
class ChatRes;
struct ChatResDefaultTypeInternal;
extern ChatResDefaultTypeInternal _ChatRes_default_instance_;
}  // namespace packet
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace packet {

// ===================================================================


// -------------------------------------------------------------------

class ChatRes final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:packet.ChatRes) */ {
 public:
  inline ChatRes() : ChatRes(nullptr) {}
  ~ChatRes() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ChatRes* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ChatRes));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ChatRes(
      ::google::protobuf::internal::ConstantInitialized);

  inline ChatRes(const ChatRes& from) : ChatRes(nullptr, from) {}
  inline ChatRes(ChatRes&& from) noexcept
      : ChatRes(nullptr, std::move(from)) {}
  inline ChatRes& operator=(const ChatRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatRes& operator=(ChatRes&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChatRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatRes* internal_default_instance() {
    return reinterpret_cast<const ChatRes*>(
        &_ChatRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(ChatRes& a, ChatRes& b) { a.Swap(&b); }
  inline void Swap(ChatRes* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatRes* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChatRes* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ChatRes>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ChatRes& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ChatRes& from) { ChatRes::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ChatRes* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "packet.ChatRes"; }

 protected:
  explicit ChatRes(::google::protobuf::Arena* arena);
  ChatRes(::google::protobuf::Arena* arena, const ChatRes& from);
  ChatRes(::google::protobuf::Arena* arena, ChatRes&& from) noexcept
      : ChatRes(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDescFieldNumber = 2,
    kErrorCodeFieldNumber = 1,
  };
  // string desc = 2;
  void clear_desc() ;
  const std::string& desc() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_desc(Arg_&& arg, Args_... args);
  std::string* mutable_desc();
  PROTOBUF_NODISCARD std::string* release_desc();
  void set_allocated_desc(std::string* value);

  private:
  const std::string& _internal_desc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_desc(
      const std::string& value);
  std::string* _internal_mutable_desc();

  public:
  // .packet.ErrorCode errorCode = 1;
  void clear_errorcode() ;
  ::packet::ErrorCode errorcode() const;
  void set_errorcode(::packet::ErrorCode value);

  private:
  ::packet::ErrorCode _internal_errorcode() const;
  void _internal_set_errorcode(::packet::ErrorCode value);

  public:
  // @@protoc_insertion_point(class_scope:packet.ChatRes)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      27, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ChatRes& from_msg);
    ::google::protobuf::internal::ArenaStringPtr desc_;
    int errorcode_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Chat_2eproto;
};
// -------------------------------------------------------------------

class ChatReq final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:packet.ChatReq) */ {
 public:
  inline ChatReq() : ChatReq(nullptr) {}
  ~ChatReq() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ChatReq* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ChatReq));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ChatReq(
      ::google::protobuf::internal::ConstantInitialized);

  inline ChatReq(const ChatReq& from) : ChatReq(nullptr, from) {}
  inline ChatReq(ChatReq&& from) noexcept
      : ChatReq(nullptr, std::move(from)) {}
  inline ChatReq& operator=(const ChatReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatReq& operator=(ChatReq&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChatReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatReq* internal_default_instance() {
    return reinterpret_cast<const ChatReq*>(
        &_ChatReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(ChatReq& a, ChatReq& b) { a.Swap(&b); }
  inline void Swap(ChatReq* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatReq* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChatReq* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ChatReq>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ChatReq& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ChatReq& from) { ChatReq::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ChatReq* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "packet.ChatReq"; }

 protected:
  explicit ChatReq(::google::protobuf::Arena* arena);
  ChatReq(::google::protobuf::Arena* arena, const ChatReq& from);
  ChatReq(::google::protobuf::Arena* arena, ChatReq&& from) noexcept
      : ChatReq(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDescFieldNumber = 1,
  };
  // string desc = 1;
  void clear_desc() ;
  const std::string& desc() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_desc(Arg_&& arg, Args_... args);
  std::string* mutable_desc();
  PROTOBUF_NODISCARD std::string* release_desc();
  void set_allocated_desc(std::string* value);

  private:
  const std::string& _internal_desc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_desc(
      const std::string& value);
  std::string* _internal_mutable_desc();

  public:
  // @@protoc_insertion_point(class_scope:packet.ChatReq)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      27, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ChatReq& from_msg);
    ::google::protobuf::internal::ArenaStringPtr desc_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Chat_2eproto;
};
// -------------------------------------------------------------------

class ChatNot final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:packet.ChatNot) */ {
 public:
  inline ChatNot() : ChatNot(nullptr) {}
  ~ChatNot() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ChatNot* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ChatNot));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ChatNot(
      ::google::protobuf::internal::ConstantInitialized);

  inline ChatNot(const ChatNot& from) : ChatNot(nullptr, from) {}
  inline ChatNot(ChatNot&& from) noexcept
      : ChatNot(nullptr, std::move(from)) {}
  inline ChatNot& operator=(const ChatNot& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatNot& operator=(ChatNot&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChatNot& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatNot* internal_default_instance() {
    return reinterpret_cast<const ChatNot*>(
        &_ChatNot_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(ChatNot& a, ChatNot& b) { a.Swap(&b); }
  inline void Swap(ChatNot* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatNot* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChatNot* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ChatNot>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ChatNot& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ChatNot& from) { ChatNot::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ChatNot* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "packet.ChatNot"; }

 protected:
  explicit ChatNot(::google::protobuf::Arena* arena);
  ChatNot(::google::protobuf::Arena* arena, const ChatNot& from);
  ChatNot(::google::protobuf::Arena* arena, ChatNot&& from) noexcept
      : ChatNot(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDescFieldNumber = 2,
    kSessionIdFieldNumber = 1,
  };
  // string desc = 2;
  void clear_desc() ;
  const std::string& desc() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_desc(Arg_&& arg, Args_... args);
  std::string* mutable_desc();
  PROTOBUF_NODISCARD std::string* release_desc();
  void set_allocated_desc(std::string* value);

  private:
  const std::string& _internal_desc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_desc(
      const std::string& value);
  std::string* _internal_mutable_desc();

  public:
  // uint64 sessionId = 1;
  void clear_sessionid() ;
  ::uint64_t sessionid() const;
  void set_sessionid(::uint64_t value);

  private:
  ::uint64_t _internal_sessionid() const;
  void _internal_set_sessionid(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:packet.ChatNot)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      27, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ChatNot& from_msg);
    ::google::protobuf::internal::ArenaStringPtr desc_;
    ::uint64_t sessionid_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Chat_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ChatReq

// string desc = 1;
inline void ChatReq::clear_desc() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.desc_.ClearToEmpty();
}
inline const std::string& ChatReq::desc() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:packet.ChatReq.desc)
  return _internal_desc();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ChatReq::set_desc(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.desc_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:packet.ChatReq.desc)
}
inline std::string* ChatReq::mutable_desc() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_desc();
  // @@protoc_insertion_point(field_mutable:packet.ChatReq.desc)
  return _s;
}
inline const std::string& ChatReq::_internal_desc() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.desc_.Get();
}
inline void ChatReq::_internal_set_desc(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.desc_.Set(value, GetArena());
}
inline std::string* ChatReq::_internal_mutable_desc() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.desc_.Mutable( GetArena());
}
inline std::string* ChatReq::release_desc() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:packet.ChatReq.desc)
  return _impl_.desc_.Release();
}
inline void ChatReq::set_allocated_desc(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.desc_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.desc_.IsDefault()) {
    _impl_.desc_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:packet.ChatReq.desc)
}

// -------------------------------------------------------------------

// ChatRes

// .packet.ErrorCode errorCode = 1;
inline void ChatRes::clear_errorcode() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.errorcode_ = 0;
}
inline ::packet::ErrorCode ChatRes::errorcode() const {
  // @@protoc_insertion_point(field_get:packet.ChatRes.errorCode)
  return _internal_errorcode();
}
inline void ChatRes::set_errorcode(::packet::ErrorCode value) {
  _internal_set_errorcode(value);
  // @@protoc_insertion_point(field_set:packet.ChatRes.errorCode)
}
inline ::packet::ErrorCode ChatRes::_internal_errorcode() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::packet::ErrorCode>(_impl_.errorcode_);
}
inline void ChatRes::_internal_set_errorcode(::packet::ErrorCode value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.errorcode_ = value;
}

// string desc = 2;
inline void ChatRes::clear_desc() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.desc_.ClearToEmpty();
}
inline const std::string& ChatRes::desc() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:packet.ChatRes.desc)
  return _internal_desc();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ChatRes::set_desc(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.desc_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:packet.ChatRes.desc)
}
inline std::string* ChatRes::mutable_desc() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_desc();
  // @@protoc_insertion_point(field_mutable:packet.ChatRes.desc)
  return _s;
}
inline const std::string& ChatRes::_internal_desc() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.desc_.Get();
}
inline void ChatRes::_internal_set_desc(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.desc_.Set(value, GetArena());
}
inline std::string* ChatRes::_internal_mutable_desc() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.desc_.Mutable( GetArena());
}
inline std::string* ChatRes::release_desc() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:packet.ChatRes.desc)
  return _impl_.desc_.Release();
}
inline void ChatRes::set_allocated_desc(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.desc_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.desc_.IsDefault()) {
    _impl_.desc_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:packet.ChatRes.desc)
}

// -------------------------------------------------------------------

// ChatNot

// uint64 sessionId = 1;
inline void ChatNot::clear_sessionid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sessionid_ = ::uint64_t{0u};
}
inline ::uint64_t ChatNot::sessionid() const {
  // @@protoc_insertion_point(field_get:packet.ChatNot.sessionId)
  return _internal_sessionid();
}
inline void ChatNot::set_sessionid(::uint64_t value) {
  _internal_set_sessionid(value);
  // @@protoc_insertion_point(field_set:packet.ChatNot.sessionId)
}
inline ::uint64_t ChatNot::_internal_sessionid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sessionid_;
}
inline void ChatNot::_internal_set_sessionid(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sessionid_ = value;
}

// string desc = 2;
inline void ChatNot::clear_desc() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.desc_.ClearToEmpty();
}
inline const std::string& ChatNot::desc() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:packet.ChatNot.desc)
  return _internal_desc();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ChatNot::set_desc(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.desc_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:packet.ChatNot.desc)
}
inline std::string* ChatNot::mutable_desc() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_desc();
  // @@protoc_insertion_point(field_mutable:packet.ChatNot.desc)
  return _s;
}
inline const std::string& ChatNot::_internal_desc() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.desc_.Get();
}
inline void ChatNot::_internal_set_desc(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.desc_.Set(value, GetArena());
}
inline std::string* ChatNot::_internal_mutable_desc() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.desc_.Mutable( GetArena());
}
inline std::string* ChatNot::release_desc() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:packet.ChatNot.desc)
  return _impl_.desc_.Release();
}
inline void ChatNot::set_allocated_desc(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.desc_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.desc_.IsDefault()) {
    _impl_.desc_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:packet.ChatNot.desc)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace packet


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // Chat_2eproto_2epb_2eh
