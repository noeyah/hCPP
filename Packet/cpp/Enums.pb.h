// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: Enums.proto
// Protobuf C++ Version: 5.29.3

#ifndef Enums_2eproto_2epb_2eh
#define Enums_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_Enums_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_Enums_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_Enums_2eproto;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace packet {
enum Defaults : int {
  DEFAULT_DEFINE = 0,
  NAME_MAX_LIMIT = 12,
  MESSAGE_MAX_LIMIT = 500,
  Defaults_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Defaults_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Defaults_IsValid(int value);
extern const uint32_t Defaults_internal_data_[];
constexpr Defaults Defaults_MIN = static_cast<Defaults>(0);
constexpr Defaults Defaults_MAX = static_cast<Defaults>(500);
constexpr int Defaults_ARRAYSIZE = 500 + 1;
const ::google::protobuf::EnumDescriptor*
Defaults_descriptor();
template <typename T>
const std::string& Defaults_Name(T value) {
  static_assert(std::is_same<T, Defaults>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Defaults_Name().");
  return ::google::protobuf::internal::NameOfEnum(Defaults_descriptor(), value);
}
inline bool Defaults_Parse(absl::string_view name, Defaults* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Defaults>(
      Defaults_descriptor(), name, value);
}
enum ErrorCode : int {
  OK = 0,
  FAIL = 1,
  FAIL_ALREADY_IN_ROOM = 100,
  FAIL_NOT_IN_ROOM = 101,
  FAIL_EMPTY_NAME = 102,
  FAIL_EXCEED_NAME_LIMIT = 103,
  FAIL_EXCEED_MESSAGE_LIMIT = 110,
  FAIL_EMPTY_MESSAGE = 111,
  ErrorCode_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ErrorCode_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ErrorCode_IsValid(int value);
extern const uint32_t ErrorCode_internal_data_[];
constexpr ErrorCode ErrorCode_MIN = static_cast<ErrorCode>(0);
constexpr ErrorCode ErrorCode_MAX = static_cast<ErrorCode>(111);
constexpr int ErrorCode_ARRAYSIZE = 111 + 1;
const ::google::protobuf::EnumDescriptor*
ErrorCode_descriptor();
template <typename T>
const std::string& ErrorCode_Name(T value) {
  static_assert(std::is_same<T, ErrorCode>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ErrorCode_Name().");
  return ::google::protobuf::internal::NameOfEnum(ErrorCode_descriptor(), value);
}
inline bool ErrorCode_Parse(absl::string_view name, ErrorCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ErrorCode>(
      ErrorCode_descriptor(), name, value);
}

// ===================================================================



// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace packet


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::packet::Defaults> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::packet::Defaults>() {
  return ::packet::Defaults_descriptor();
}
template <>
struct is_proto_enum<::packet::ErrorCode> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::packet::ErrorCode>() {
  return ::packet::ErrorCode_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // Enums_2eproto_2epb_2eh
